#!/usr/bin/env python

from os.path import dirname, exists, join
from os import mkdir

import configparser
import argparse

from datetime import date

from ldcoolp.curation import main
from ldcoolp.logger import LogClass

# Version and branch info
from ldcoolp import __version__
from ldcoolp.git_info import get_active_branch_name, get_latest_commit
from ldcoolp import __file__ as library_path

config = configparser.ConfigParser()

today = date.today()

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for LD-Cool-P prerequisite set-up.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--article_id', required=True, help='Figshare article ID')
    parser.add_argument('--url_open', action='store_true', help='Whether to use urlopen')
    parser.add_argument('--browser', action='store_true', help='Whether to use urlopen')
    # parser.add_argument('--config', required=True, help='path to configuration file')
    # parser.add_argument('--api_token', required=True, help='Figshare API token')
    args = parser.parse_args()

    branch_name = get_active_branch_name(library_root_path)
    git_commit, git_short_commit = get_latest_commit(library_root_path)

    banner_message = f"""
    This is the command-line tool that automates data retrieval, and curatorial review set-up. It:
    1. Perform folder management for each deposit
    2. Retrieves the dataset
    3. Download a copy of the curatorial review process
    4. Attempt to retrieve the Qualtrics deposit agreement or provide you with the link

    LD-Cool-P branch: {branch_name}
    LD-Cool-P version: {__version__}
    LD-Cool-P commit hash: {git_short_commit}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/ualibraries/LD_Cool_P/issues/new
    """
    print(banner_message)

    config.read(args.config)

    # Define logfile
    root_directory_main = config.get('curation',
                                     config.get('curation', 'log_parent_dir'))

    log_dir = join(root_directory_main, config.get('curation', 'log_dir'))
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'prereq_script'
    logfile = "{}.{}.log".format(logfile_prefix, today.strftime("%Y-%m-%d"))

    log = LogClass(log_dir, logfile).get_logger()

    log.info("****************************")

    log.debug(f"LD-Cool-P branch: {branch_name}")
    log.debug(f"LD-Cool-P version: {__version__} ({git_short_commit})")
    log.debug(f"LD-Cool-P commit hash: {git_commit}")

    # Separate comma-separated list of articles
    articles = args.article_id.split(',')
    num_articles = len(articles)

    log.info(f"Number of Deposits: {num_articles}")

    # Loop over each article
    count = 0
    for ii in range(len(articles)):
        log.info(f"Retrieving: {articles[ii]} ...")  # ... {ii+1} / {num_articles}")

        # Run pre-req steps
        main.workflow(articles[ii], url_open=args.url_open, browser=args.browser,
                      log=log)
        count += 1

        log.info(f"Completed: {articles[ii]} ...")
        log.info(f"Completed: {count} / {num_articles}")

    log.info("****************************")
    log.info("STATUS: Exit 0")
