#!/usr/bin/env python

from os.path import dirname, exists, join
from os import mkdir, stat

import argparse

from datetime import date

from ldcoolp.curation.inspection import readme
from ldcoolp.curation.depositor_name import DepositorName
from ldcoolp.curation.api import figshare
from ldcoolp.logger import LogClass, get_user_hostname
from ldcoolp.admin import permissions

# Version and branch info
from ldcoolp import __version__
from ldcoolp.git_info import get_active_branch_name, get_latest_commit
from ldcoolp import __file__ as library_path

today = date.today()

# Config loader
from ldcoolp.config import dict_load

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver to update README file data curation.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--article_id', required=True, help='Figshare article ID')
    args = parser.parse_args()

    if not exists(args.config):
        raise FileNotFoundError(f"WARNING!!! Config file not found: {args.config}")

    branch_name = get_active_branch_name(library_root_path)
    git_commit, git_short_commit = get_latest_commit(library_root_path)

    banner_message = f"""
    This is the command-line tool to update the README.txt file. It:
    1. Will retrieve figshare and Qualtrics metadata information
    2. Save the previous README.txt
    3. Re-generate a README.txt

    LD-Cool-P branch: {branch_name}
    LD-Cool-P version: {__version__}
    LD-Cool-P commit hash: {git_short_commit}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/ualibraries/LD_Cool_P/issues/new
    """
    print(banner_message)

    # Load configuration
    config_dict = dict_load(args.config)

    curation_dict = config_dict['curation']

    # Define logfile
    root_directory_main = curation_dict[curation_dict['log_parent_dir']]

    log_dir = join(root_directory_main, curation_dict['log_dir'])
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'update_readme'
    logfile = f"{logfile_prefix}.{today.strftime('%Y-%m-%d')}.log"

    log = LogClass(log_dir, logfile).get_logger()

    log.info("****************************")

    log.debug(f"LD-Cool-P branch: {branch_name}")
    log.debug(f"LD-Cool-P version: {__version__} ({git_short_commit})")
    log.debug(f"LD-Cool-P commit hash: {git_commit}")

    # Retrieve username, hostname, IP
    sys_info = get_user_hostname()
    log.debug(f"username : {sys_info['user']}")
    log.debug(f"hostname : {sys_info['hostname']}")
    log.debug(f"IP Addr  : {sys_info['ip']}")
    log.debug(f"Op. Sys. : {sys_info['os']}")

    # Separate comma-separated list of articles
    articles = args.article_id.split(',')
    num_articles = len(articles)

    log.info(f"Number of Deposits: {num_articles}")

    fs_admin = figshare.FigshareInstituteAdmin(figshare_dict=config_dict['figshare'])

    # Loop over each article
    count = 0
    for ii in range(len(articles)):
        log.info(f"Updating README.txt for : {articles[ii]} ...")

        dn = DepositorName(articles[ii], fs_admin, log=log)

        # Run pre-req steps
        rc = readme.ReadmeClass(dn, config_dict=config_dict, update=True, log=log)
        rc.update()

        count += 1

        log.info(f"Completed: {articles[ii]} ...")
        log.info(f"Completed: {count} / {num_articles}")

    # Change permission to mode=666 (rw for all)
    status = stat(join(log_dir, logfile))
    if oct(status.st_mode)[-3:] == '666':
        log.debug("Permissions set for logfile")
    else:
        log.debug("Changing permissions on logfile...")
        permissions.curation(join(log_dir, logfile), mode=0o666)

    log.info("****************************")
    log.info("Exit 0")
