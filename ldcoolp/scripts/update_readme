#!/usr/bin/env python

from os.path import dirname, exists, join
from os import mkdir

import argparse
import configparser

from datetime import date

from ldcoolp.curation.inspection import readme
from ldcoolp.curation.depositor_name import DepositorName
from ldcoolp.curation.api import figshare
from redata.commons import logger

# Version and branch info
from ldcoolp import __version__, CODE_NAME
from redata.commons.git_info import GitInfo
from ldcoolp import __file__ as library_path

today = date.today()

# Config loader
from ldcoolp.config import dict_load

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver to update README file data curation.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--article_id', required=True, help='Figshare article ID')
    args = parser.parse_args()

    if not exists(args.config):
        raise FileNotFoundError(f"WARNING!!! Config file not found: {args.config}")

    gi = GitInfo(library_root_path)

    banner_message = f"""
    This is the command-line tool to update the README.txt file. It:
    1. Will retrieve figshare and Qualtrics metadata information
    2. Save the previous README.txt
    3. Re-generate a README.txt

    {CODE_NAME} branch: {gi.branch}
    {CODE_NAME} version: {__version__}
    {CODE_NAME} commit hash: {gi.short_commit}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/ualibraries/LD_Cool_P/issues/new
    """
    print(banner_message)

    # Load configuration
    try:
        config_dict = dict_load(args.config)
    except configparser.ParsingError:
        exit()

    curation_dict = config_dict['curation']

    # Define logfile
    root_directory_main = curation_dict[curation_dict['log_parent_dir']]

    log_dir = join(root_directory_main, curation_dict['log_dir'])
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'update_readme'
    log = logger.log_setup(log_dir, logfile_prefix)
    log_filename = logger.get_log_file(log.handlers[-1])

    lc = logger.LogCommons(log, logfile_prefix, gi,
                           code_name=CODE_NAME, version=__version__)

    lc.script_start()

    # Retrieve username, hostname, IP
    lc.script_sys_info()

    # Separate comma-separated list of articles
    articles = args.article_id.split(',')
    num_articles = len(articles)

    log.info(f"Number of Deposits: {num_articles}")

    fs_admin = figshare.FigshareInstituteAdmin(figshare_dict=config_dict['figshare'])

    # Loop over each article
    count = 0
    for ii in range(len(articles)):
        log.info(f"Updating README.txt for : {articles[ii]} ...")

        dn = DepositorName(articles[ii], fs_admin, log=log)

        # Run pre-req steps
        rc = readme.ReadmeClass(dn, config_dict=config_dict, update=True, log=log)
        rc.update()

        count += 1

        log.info(f"Completed: {articles[ii]} ...")
        log.info(f"Completed: {count} / {num_articles}")

    # Change permission to mode=666 (rw for all)
    lc.log_permission()

    lc.script_end()
