#!/usr/bin/env python

from os.path import dirname, exists, join
from os import mkdir

import argparse
import configparser

from datetime import date

from ldcoolp.admin.move import MoveClass
from ldcoolp.curation.depositor_name import DepositorName
from ldcoolp.curation.api.figshare import FigshareInstituteAdmin
from redata.commons import logger

# Version and branch info
from ldcoolp import __version__
from redata.commons.git_info import GitInfo
from ldcoolp import __file__ as library_path

# Config loader
from ldcoolp.config import dict_load

today = date.today()

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for data curation moves.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--article_id', required=True, help='Figshare article ID')
    parser.add_argument('--direction', required=True, help='Direction to move. Either "next", "back" or "publish"')
    args = parser.parse_args()

    if not exists(args.config):
        raise FileNotFoundError(f"WARNING!!! Config file not found: {args.config}")

    if args.direction not in ['next', 'back', 'publish']:
        raise ValueError(f"WARNING!!! --direction flag not properly set. Either next, back, or publish")

    gi = GitInfo(library_root_path)

    # Load configuration
    try:
        config_dict = dict_load(args.config)
    except configparser.ParsingError:
        exit()

    curation_dict = config_dict['curation']

    # Define logfile
    root_directory_main = curation_dict[curation_dict['log_parent_dir']]

    log_dir = join(root_directory_main, curation_dict['log_dir'])
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'perform_move'
    log = logger.log_setup(log_dir, logfile_prefix)
    log_filename = logger.get_log_file(log.handlers[-1])

    lc = logger.LogCommons(log, logfile_prefix, gi,
                           code_name='LD-Cool-P', version=__version__)

    lc.script_start()

    # Retrieve username, hostname, IP
    lc.script_sys_info()

    # Separate comma-separated list of articles
    articles = args.article_id.split(',')
    num_articles = len(articles)

    log.info(f"Number of Deposits: {num_articles}")

    fs_admin = FigshareInstituteAdmin(figshare_dict=config_dict['figshare'], log=log)
    mc = MoveClass(curation_dict=curation_dict, log=log)

    # Loop over each article
    count = 0
    for ii in range(len(articles)):
        dn = DepositorName(articles[ii], fs_admin, log=log)
        log.info(f"Performing move with --direction {args.direction}")
        if args.direction == 'next':
            mc.move_to_next(dn.folderName)
        if args.direction == 'back':
            mc.move_back(dn.folderName)
        if args.direction == 'publish':
            mc.move_to_publish(dn.folderName)

        count += 1

        log.info(f"Completed: {articles[ii]} ...")
        log.info(f"Completed: {count} / {num_articles}")

    # Change permission to mode=666 (rw for all)
    lc.log_permission()

    lc.script_end()
