#!/usr/bin/env python

from os.path import dirname, join, exists
from os import mkdir
import argparse

from glob import glob

from datetime import date

from ldcoolp.logger import LogClass, get_user_hostname
from ldcoolp.config import dict_load

# Version and branch info
from ldcoolp import __version__
from ldcoolp.git_info import get_active_branch_name, get_latest_commit
from ldcoolp import __file__ as library_path

today = date.today()

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


def old_folder_name(name_dict):
    temp_name = name_dict['simplify_fullName']

    if name_dict['self_deposit']:
        old_folderName = temp_name
    else:
        first_author = name_dict['authors'][0]
        old_folderName = f"{temp_name} - {first_author}"

    old_folderName = old_folderName.replace(' ', "\ ")  # Escape spaces
    return old_folderName


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for LD-Cool-P folder renaming script.')
    parser.add_argument('--config', required=True, help='full path to configuration file')
    parser.add_argument('--stage', required=True,
                        help='comma-separated list of stages, e.g., 4.Published')
    args = parser.parse_args()

    if not exists(args.config):
        raise FileNotFoundError(f"WARNING!!! Config file not found: {args.config}")

    branch_name = get_active_branch_name(library_root_path)
    git_commit, git_short_commit = get_latest_commit(library_root_path)

    banner_message = f"""
    This is the command-line tool that maps the old folder names to the new ones.

    Notes:
     [1] This script is not perfect as the old names have changed over time.
         Thus, user intervention is required.  However, the new name is correct

     [2] It only works for _v1 case. Complicated cases with multiple versions
         require stricter handling

    LD-Cool-P branch: {branch_name}
    LD-Cool-P version: {__version__}
    LD-Cool-P commit hash: {git_short_commit}
    Created by Chun Ly
    Bug/Suggestions? Submit a GitHub bug report here: https://github.com/ualibraries/LD_Cool_P/issues/choose
    """
    print(banner_message)

    # Load configuration
    config_dict = dict_load(args.config)
    curation_dict = config_dict['curation']

    # Define logfile
    root_directory_main = curation_dict[curation_dict['log_parent_dir']]

    log_dir = join(root_directory_main, curation_dict['log_dir'])
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'folder_rename_versioning'
    logfile = f"{logfile_prefix}.{today.strftime('%Y-%m-%d')}.log"

    log = LogClass(log_dir, logfile).get_logger()

    log.info("****************************")

    log.debug(f"LD-Cool-P branch: {branch_name}")
    log.debug(f"LD-Cool-P version: {__version__} ({git_short_commit})")
    log.debug(f"LD-Cool-P commit hash: {git_commit}")

    # Retrieve username, hostname, IP
    sys_info = get_user_hostname()
    log.debug(f"username : {sys_info['user']}")
    log.debug(f"hostname : {sys_info['hostname']}")
    log.debug(f"IP Addr  : {sys_info['ip']}")
    log.debug(f"Op. Sys. : {sys_info['os']}")

    sh_cmd = list()

    # Loop over each stage
    stages = args.stage.split(',')
    curation_directory_main = curation_dict[curation_dict['parent_dir']]

    organize_folders = ['folder_copy_data', 'folder_data', 'folder_ual_rdm']

    for stage in stages:
        log.info(f"Working on : {stage}")
        sh_cmd.append(f"# {stage}")

        log.info("Retrieving _v1 paths")
        folders = glob(join(curation_directory_main, stage, '*_v1'))
        for folder in folders:
            out_folder = folder.replace('_v1', '')
            sh_cmd.append(f"orig_folder='{folder}'")
            sh_cmd.append(f"out_folder='{out_folder}'")
            sh_cmd.append(f'mv $orig_folder $out_folder')

            v1_folder = join(out_folder, 'v1')
            if not exists(v1_folder):
                sh_cmd.append(f'mkdir $out_folder/v1')

            for organize_folder in organize_folders:
                # This is for temporary exists check
                orig_path = join(folder, curation_dict[organize_folder])

                pwd_path = join(out_folder, curation_dict[organize_folder])
                if exists(orig_path):
                    sh_cmd.append(f'mv $out_folder/{curation_dict[organize_folder]} $out_folder/v1')

        script_outfile = join(curation_directory_main, f'{logfile_prefix}_{stage}.sh')
        log.info(f"Writing: {script_outfile}")
        f = open(script_outfile, 'w')
        f.writelines([cmd+'\n' for cmd in sh_cmd])
        f.close()

    log.info("****************************")
    log.info("STATUS: Exit 0")
