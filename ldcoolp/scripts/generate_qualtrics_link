#!/usr/bin/env python

from os.path import dirname, exists, join
from os import mkdir

import argparse
import configparser

from datetime import date

from ldcoolp.logger import LogClass
from ldcoolp.curation.api import figshare
from ldcoolp.curation.api import qualtrics
from ldcoolp.curation import depositor_name

# Version and branch info
from ldcoolp import __version__
from ldcoolp.git_info import get_active_branch_name, get_latest_commit
from ldcoolp import __file__ as library_path

# Read in default configuration file
config = configparser.ConfigParser()

today = date.today()

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for LD-Cool-P retrieval of Qualtrics link.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--article_id', required=True, help='Figshare article ID')
    args = parser.parse_args()

    branch_name = get_active_branch_name(library_root_path)
    git_commit, git_short_commit = get_latest_commit(library_root_path)

    banner_message = f"""
    This is the command-line tool to generate custom Qualtrics URL for a deposit.
    LD-Cool-P branch: {branch_name}
    LD-Cool-P version: {__version__}
    LD-Cool-P commit hash: {git_short_commit}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/ualibraries/LD_Cool_P/issues/new
    """

    print(banner_message)

    config.read(args.config)

    root_directory_main = config.get('curation',
                                     config.get('curation', 'log_parent_dir'))

    log_dir = join(root_directory_main, config.get('curation', 'log_dir'))
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'generate_qualtrics_link'
    logfile = "{}.{}.log".format(logfile_prefix, today.strftime("%Y-%m-%d"))

    log = LogClass(log_dir, logfile).get_logger()

    api_token = config.get('figshare', 'api_token')
    stage_flag = config.getboolean('figshare', 'stage')
    fs_admin = figshare.FigshareInstituteAdmin(token=api_token, stage=stage_flag)

    qualtrics_dataCenter = config.get('qualtrics', 'dataCenter')
    qualtrics_token = config.get('qualtrics', 'token')
    qualtrics_survey_id = config.get('qualtrics', 'survey_id')
    q = qualtrics.Qualtrics(qualtrics_dataCenter, qualtrics_token, qualtrics_survey_id)

    log.info("************************************")
    log.debug(f"LD-Cool-P branch: {branch_name}")
    log.debug(f"LD-Cool-P version: {__version__} ({git_short_commit})")
    log.debug(f"LD-Cool-P commit hash: {git_commit}")

    log.info(f"Retrieving Deposit Agreement URL for {args.article_id} ...")

    dn = depositor_name.DepositorName(args.article_id, fs_admin, verbose=False)

    full_url = q.generate_url(dn.name_dict)
    log.info(full_url)

    log.info("************************************")
    log.info("Exit 0")
