#!/usr/bin/env python

from os.path import dirname, exists, join
from os import mkdir

import argparse
import configparser

from datetime import date

from redata.commons import logger
from ldcoolp.curation.api import figshare
from ldcoolp.curation.api import qualtrics
from ldcoolp.curation import depositor_name
from ldcoolp.config import dict_load
from ldcoolp.curation.email import urls

# Version and branch info
from ldcoolp import __version__, CODE_NAME
from redata.commons.git_info import GitInfo
from ldcoolp import __file__ as library_path

today = date.today()

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for LD-Cool-P retrieval of Qualtrics link.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--article_id', required=True, help='Figshare article ID')
    args = parser.parse_args()

    if not exists(args.config):
        raise FileNotFoundError(f"WARNING!!! Config file not found: {args.config}")

    gi = GitInfo(library_root_path)

    banner_message = f"""
    This is the command-line tool to generate custom Qualtrics URL for a deposit.
    {CODE_NAME} branch: {gi.branch}
    {CODE_NAME} version: {__version__}
    {CODE_NAME} commit hash: {gi.short_commit}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/UAL-ODIS/LD-Cool-P/issues/new
    """

    print(banner_message)

    # Load configuration
    try:
        config_dict = dict_load(args.config)
    except configparser.ParsingError:
        exit()

    curation_dict = config_dict['curation']
    root_directory_main = curation_dict[curation_dict['log_parent_dir']]

    log_dir = join(root_directory_main, curation_dict['log_dir'])
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'generate_qualtrics_link'
    log = logger.log_setup(log_dir, logfile_prefix)

    lc = logger.LogCommons(log, logfile_prefix, gi,
                           code_name=CODE_NAME, version=__version__)

    lc.script_start()

    # Retrieve username, hostname, IP
    lc.script_sys_info()

    # Configuration information
    log.info(f"Config file: {args.config}")

    log.info(f"Retrieving Deposit Agreement URL for {args.article_id} ...")

    fs_dict = config_dict['figshare']
    fs_admin = figshare.FigshareInstituteAdmin(figshare_dict=fs_dict)

    q_dict = config_dict['qualtrics']
    q = qualtrics.Qualtrics(qualtrics_dict=q_dict, log=log)

    dn = depositor_name.DepositorName(args.article_id, fs_admin, verbose=False)

    full_url = q.generate_url(dn.name_dict)
    log.info("URL for Deposit Agreement form: ")
    log.info(full_url)

    alias_prefix = f"{dn.name_dict['simplify_surName']}-" + \
                   f"{dn.article_id}-{dn.version_no}"
    da_alias = f"{alias_prefix}-DA"
    da_tinyurl = urls.tiny_url(full_url, alias=da_alias)
    log.info(f"TinyURL: {da_tinyurl}")

    readme_full_url = q.generate_readme_url(dn)
    log.info("URL for README form: ")
    log.info(readme_full_url)
    readme_alias = f"{alias_prefix}-README"
    readme_tinyurl = urls.tiny_url(readme_full_url, alias=readme_alias)
    log.info(f"TinyURL: {readme_tinyurl}")

    # Change permission to mode=666 (rw for all)
    lc.log_permission()

    lc.script_end()
