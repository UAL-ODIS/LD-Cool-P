#!/usr/bin/env python

from os.path import dirname, exists, join
from os import mkdir, stat

import argparse
import configparser

from datetime import date

from ldcoolp.logger import LogClass, get_user_hostname
from ldcoolp.curation.api import figshare
from ldcoolp.curation.api import qualtrics
from ldcoolp.curation import depositor_name
from ldcoolp.admin import permissions
from ldcoolp.config import dict_load
from ldcoolp.curation.email import urls

# Version and branch info
from ldcoolp import __version__
from redata.commons.git_info import GitInfo
from ldcoolp import __file__ as library_path

today = date.today()

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for LD-Cool-P retrieval of Qualtrics link.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--article_id', required=True, help='Figshare article ID')
    args = parser.parse_args()

    if not exists(args.config):
        raise FileNotFoundError(f"WARNING!!! Config file not found: {args.config}")

    gi = GitInfo(library_root_path)

    banner_message = f"""
    This is the command-line tool to generate custom Qualtrics URL for a deposit.
    LD-Cool-P branch: {gi.branch}
    LD-Cool-P version: {__version__}
    LD-Cool-P commit hash: {gi.short_commit}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/ualibraries/LD_Cool_P/issues/new
    """

    print(banner_message)

    # Load configuration
    try:
        config_dict = dict_load(args.config)
    except configparser.ParsingError:
        exit()

    curation_dict = config_dict['curation']
    root_directory_main = curation_dict[curation_dict['log_parent_dir']]

    log_dir = join(root_directory_main, curation_dict['log_dir'])
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'generate_qualtrics_link'
    logfile = "{}.{}.log".format(logfile_prefix, today.strftime("%Y-%m-%d"))

    log = LogClass(log_dir, logfile).get_logger()

    fs_dict = config_dict['figshare']
    fs_admin = figshare.FigshareInstituteAdmin(figshare_dict=fs_dict)

    q_dict = config_dict['qualtrics']
    q = qualtrics.Qualtrics(qualtrics_dict=q_dict, log=log)

    log.info("************************************")
    log.debug(f"LD-Cool-P branch: {gi.branch}")
    log.debug(f"LD-Cool-P version: {__version__} ({gi.short_commit})")
    log.debug(f"LD-Cool-P commit hash: {gi.commit}")

    # Retrieve username, hostname, IP
    sys_info = get_user_hostname()
    log.debug(f"username : {sys_info['user']}")
    log.debug(f"hostname : {sys_info['hostname']}")
    log.debug(f"IP Addr  : {sys_info['ip']}")
    log.debug(f"Op. Sys. : {sys_info['os']}")

    # Configuration information
    log.info(f"Config file: {args.config}")

    log.info(f"Retrieving Deposit Agreement URL for {args.article_id} ...")

    dn = depositor_name.DepositorName(args.article_id, fs_admin, verbose=False)

    full_url = q.generate_url(dn.name_dict)
    log.info("URL for Deposit Agreement form: ")
    log.info(full_url)

    alias_prefix = f"{dn.name_dict['simplify_surName']}-" + \
                   f"{dn.article_id}-{dn.version_no}"
    da_alias = f"{alias_prefix}-DA"
    da_tinyurl = urls.tiny_url(full_url, alias=da_alias)
    log.info(f"TinyURL: {da_tinyurl}")

    readme_full_url = q.generate_readme_url(dn)
    log.info("URL for README form: ")
    log.info(readme_full_url)
    readme_alias = f"{alias_prefix}-README"
    readme_tinyurl = urls.tiny_url(readme_full_url, alias=readme_alias)
    log.info(f"TinyURL: {readme_tinyurl}")

    # Change permission to mode=666 (rw for all)
    status = stat(join(log_dir, logfile))
    if oct(status.st_mode)[-3:] == '666':
        log.debug("Permissions set for logfile")
    else:
        log.debug("Changing permissions on logfile...")
        permissions.curation(join(log_dir, logfile), mode=0o666)

    log.info("************************************")
    log.info("Exit 0")
