#!/usr/bin/env python

from os.path import dirname, exists, join
from os import mkdir

import argparse
import configparser

from datetime import date

from redata.commons import logger
from ldcoolp.curation.api import figshare
from ldcoolp.curation import depositor_name

# Version and branch info
from ldcoolp import __version__, CODE_NAME
from redata.commons.git_info import GitInfo
from ldcoolp import __file__ as library_path

# Read in default configuration file
from ldcoolp.config import dict_load

cols_order = ['article_id', 'id', 'depositor_name', 'title', 'account_id',
              'modified_date', 'created_date']

today = date.today()

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for LD-Cool-P curation list retrieval.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    args = parser.parse_args()

    if not exists(args.config):
        raise FileNotFoundError(f"WARNING!!! Config file not found: {args.config}")

    gi = GitInfo(library_root_path)

    banner_message = f"""
    This is the command-line tool to retrieve the list of pending curation.
    {CODE_NAME} branch: {gi.branch}
    {CODE_NAME} version: {__version__}
    {CODE_NAME} commit hash: {gi.short_commit}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/UAL-ODIS/LD-Cool-P/issues/new
    """
    print(banner_message)

    # Load configuration
    try:
        config_dict = dict_load(args.config)
    except configparser.ParsingError:
        exit()

    curation_dict = config_dict['curation']
    root_directory_main = curation_dict[curation_dict['log_parent_dir']]

    log_dir = join(root_directory_main, curation_dict['log_dir'])
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'get_curation_list'
    log = logger.log_setup(log_dir, logfile_prefix)
    log_filename = logger.get_log_file(log.handlers[-1])

    lc = logger.LogCommons(log, logfile_prefix, gi,
                           code_name=CODE_NAME, version=__version__)

    lc.script_start()

    # Retrieve username, hostname, IP
    lc.script_sys_info()

    # Configuration information
    log.info(f"Config file: {args.config}")

    fs_dict = config_dict['figshare']
    fs_admin = figshare.FigshareInstituteAdmin(figshare_dict=fs_dict)

    log.info("Retrieving list now ...")

    curation_df = fs_admin.get_curation_list()

    log.info("Truncating to pending list ...")
    pending_curation_df = curation_df.loc[curation_df['status'] == 'pending']
    pending_curation_article = pending_curation_df['article_id'].tolist()

    depositor_names = ['N/A'] * len(pending_curation_df)
    titles = ['N/A'] * len(pending_curation_df)

    log.info("Populating depositor_name and titles ...")
    for ii in range(len(pending_curation_df)):
        dn = depositor_name.DepositorName(pending_curation_article[ii],
                                          fs_admin, verbose=False)

        depositor_names[ii] = dn.name_dict['simplify_fullName']
        titles[ii] = dn.name_dict['title'][:30] + "..."

    # Make shorter title name
    pending_curation_df.insert(2, 'depositor_name', depositor_names)
    pending_curation_df.insert(3, 'title', titles)

    log.info("****************************")
    log.info("List of pending curation ...")
    logger.pandas_write_buffer(pending_curation_df[cols_order],
                               log_filename=log_filename)

    # Change permission to mode=666 (rw for all)
    lc.log_permission()

    lc.script_end()
