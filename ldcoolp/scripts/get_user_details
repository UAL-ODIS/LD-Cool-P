#!/usr/bin/env python

from os.path import dirname, exists, join
from os import mkdir

import argparse
import configparser

from datetime import date, datetime
import pytz

from ldcoolp_figshare import FigshareInstituteAdmin
from redata.commons import logger
from ldcoolp.admin import permissions

# Version and branch info
from ldcoolp import __version__, CODE_NAME
from redata.commons.git_info import GitInfo
from ldcoolp import __file__ as library_path

# Config loader
from ldcoolp.config import dict_load

today = date.today()

tz_AZ = pytz.timezone('US/Arizona')
now = datetime.now(tz_AZ)

library_root_path = dirname(dirname(library_path))  # Retrieve parent directory to ldcoolp


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Command-line driver for LD-Cool-P prerequisite set-up.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--write_file', action='store_true', help='Write CSV file containing results')
    parser.add_argument('--path', required=True, help='Full path to write CSV file')
    parser.add_argument('--simple', action='store_true',
                        help='Generate a basic list without detailed information')
    args = parser.parse_args()

    if not exists(args.config):
        raise FileNotFoundError(f"WARNING!!! Config file not found: {args.config}")

    gi = GitInfo(library_root_path)

    # Load configuration
    try:
        config_dict = dict_load(args.config)
    except configparser.ParsingError:
        exit()

    curation_dict = config_dict['curation']

    csv_dir = join(args.path, 'user_data')
    if not exists(csv_dir):
        mkdir(csv_dir)

    log_dir = join(args.path, curation_dict['log_dir'])
    if not exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = 'get_user_details'
    log = logger.log_setup(log_dir, logfile_prefix)

    lc = logger.LogCommons(log, logfile_prefix, gi,
                           code_name=CODE_NAME, version=__version__)

    lc.script_start()

    # Retrieve username, hostname, IP
    lc.script_sys_info()

    # Configuration information
    log.info(f"Config file: {args.config}")

    admin_filter = ['data-management@email.arizona.edu',
                    '-test@email.arizona.edu']
    fs_admin = FigshareInstituteAdmin(**config_dict['figshare'],
                                      admin_filter=admin_filter,
                                      log=log)

    if not args.simple:
        accounts_df = fs_admin.get_account_details(flag=False)
    else:
        accounts_df = fs_admin.get_account_list()

    log.info(f"Number of users: {len(accounts_df)}")
    if not args.write_file:
        print(accounts_df)
    else:
        mod_time_str = now.isoformat(timespec='minutes').replace(':', '')
        csv_outfile = join(csv_dir, f"redata_user_details.{mod_time_str}.csv")

        log.info(f"Writing file : {csv_outfile}")
        accounts_df.to_csv(csv_outfile, index=False)
        permissions.curation(csv_outfile, mode=0o666)

    # Change permission to mode=666 (rw for all)
    lc.log_permission()

    lc.script_end()
